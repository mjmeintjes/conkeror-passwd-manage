{"version":3,"sources":["../src/password-manage-services.js"],"names":[],"mappings":"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","file":"password-manage-services.js","sourcesContent":["(function() {\n    require('password-manage-utils');\n    require('password-manage-hooks');\n    provide('password-manage-services');\n    function register_services(services, I) {\n        services.user = new UserInteraction(I);\n        services.browser = new BrowserInteraction(I);\n        services.shell = new ShellInteraction();\n    }\n    register_password_manager_services(register_services);\n\n    var UserInteraction = function(I) {\n        this.I = I;\n    };\n\n    UserInteraction.prototype.ask = function*(question, _args={}) {\n        var keys = Object.keys(_args);\n        var args = {};\n        keys.forEach(function(key) {\n            args[\"$\" + key] = _args[key];\n        });\n\n        args._processed_keywords = true;\n        pmutils.debug(`display prompt '${question}' with parameters ${args}`);\n        var answer = yield ( this.I.minibuffer.read($prompt = question, forward_keywords(args)) ); \n        pmutils.debug(`user answered with ${answer}`);\n        yield ( co_return(answer) );\n    };\n\n    UserInteraction.prototype.ask_if_different = function*(question, current) {\n        pmutils.debug(`asking user ${question} but supplying default ${current}`);\n        var answer = yield ( this.ask(question, {initial_value: current, select: true, history: `passwdmanage-${question}`}) );\n        yield ( co_return(answer) );\n    };\n\n    UserInteraction.prototype.ask_for_password = function*(question, _args={}) {\n        //todo: make passwords hidden when typing in\n        var I = this.I;\n        var input = this.I.minibuffer.input_element;\n        var old_type = input.inputField.type;\n        try{\n            input.inputField.type = 'password';\n            var answer = yield ( this.ask(question, _args) );\n            yield ( co_return(answer) );\n        }\n        finally {\n            input.inputField.type = old_type;\n        }\n    };\n\n    UserInteraction.prototype.ask_to_select_number = function*(question, preselected, numbers) {\n        numbers = numbers.map(function(num){return num.toString();});\n        var selected = yield ( this.ask_to_select(question, numbers, preselected) );\n        yield ( co_return(selected) );\n    };\n    UserInteraction.prototype.ask_to_select = function*(question, options, default_option=null) {\n        pmutils.assertNotEmpty(options, 'options');\n        pmutils.assertNotEmpty(question, 'question');\n        if (!options.length) {\n            throw new interactive_error('no options found');\n        }\n        if (!default_option){\n            default_option = options[0];\n        }\n        pmutils.debug(`asking user to select from ${options}, and providing ${default_option} as default`);\n        var answer = yield ( this.ask(question, {\n            completer:  new all_word_completer($completions = options),\n            require_match:  true,\n            initial_value: default_option,\n            select:  true,\n            default_completion:  default_option,\n            auto_complete_initial:  default_option,\n            auto_complete:  true\n        }) );\n        yield ( co_return(answer) );\n    };\n\n    UserInteraction.prototype.display_message = function(message) {\n        var window = this.I.window;\n        pmutils.debug(`displaying following message to user: ${message}`);\n        window.minibuffer.message(message);\n    };\n\n\n    var BrowserInteraction = function(I) {\n        this.I = I;\n    };\n\n    BrowserInteraction.prototype.set_login_and_password_fields = function(password_domain, fields){\n        var I = this.I;\n        var document = I.buffer.document;\n        pmutils.assertNotEmpty(password_domain, 'password_domain');\n        pmutils.assertNotEmpty(fields, 'fields');\n        pmutils.debug(`trying to set login and password fields in HTML using fields ${pmutils.obj2str(fields)}`);\n        pmutils.assertNotEmpty(fields.password, 'password');\n\n        var current_domain = this.get_current_domain();\n        if (this.get_hostname(password_domain) !== current_domain){\n            throw new interactive_error(\"cannot set fields because current domain does not match the domain set for the password\");\n        }\n        var password_elements = I.buffer.document.querySelectorAll(\"input[type=password]\");\n        if (password_elements.length){\n            pmutils.debug(`setting field ${password_elements[0]} to ${fields.password}`);\n            password_elements[0].value = fields.password;\n        }\n        // TODO set username on common username fields (extract from my current LastPass)\n\n        Object.keys(fields).forEach(function(key){\n            pmutils.debug(`CONFIDENTIDAL: setting value for field ${fields[key]}`);\n            var val = fields[key];\n\n            var el = [document.getElementById(key)];\n            if (!el.length)\n                el = document.getElementsByName(key);\n            if (!el.length)\n                el = document.getElementsByClassName(key);\n\n            el = el[0];\n            if (!el){\n                pmutils.debug(`could not find a field named ${key} - not setting anything for this field`);\n                return;\n            }\n            el.value = val;\n        });\n    };\n\n    BrowserInteraction.prototype.get_current_domain = function(){\n        var I = this.I;\n        var current_url = I.buffer.document.location.href;\n        return this.get_hostname(current_url);\n    };\n\n    BrowserInteraction.prototype.get_hostname = function(url){\n        var I = this.I;\n        pmutils.debug(`retrieving current domain (uses a slow hack, but it works and not too worried about performance)`);\n        var tmp_a = I.buffer.document.createElement('a');\n        tmp_a.href = url;\n        var domain = tmp_a.hostname;\n        pmutils.debug(`extracted ${domain} hostname from url ${url}`);\n        return domain;\n    };\n\n    var ShellInteraction = function() {\n    };\n\n    ShellInteraction.prototype.get_command = function*(command, input) {\n        var results = {\n            data: \"\",\n            error: \"\"\n        };\n        var communication = {\n            0: { output: async_binary_string_writer(input) },\n            1: { input: async_binary_reader( (s) => results.data+=s||\"\") },\n            2: { input: async_binary_reader( (s) => results.error+=s||\"\") }\n        };\n        var result = yield ( shell_command(command, $fds = communication) );\n        results.return_code = result;\n        results.data = results.data.trim();\n        pmutils.debug(`received the following results from running the command: ${JSON.stringify(results)}`);\n        yield ( co_return(results) );\n    };\n})();\n"]}