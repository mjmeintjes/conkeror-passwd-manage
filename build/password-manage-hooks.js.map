{"version":3,"sources":["../src/password-manage-hooks.js"],"names":[],"mappings":"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","file":"password-manage-hooks.js","sourcesContent":["(function() {\n    require('password-manage-utils');\n    provide('password-manage-hooks');\n    var password_manager_installers = [];\n    var service_installers = [];\n    var password_generators = {};\n    var password_retrievers = {};\n\n    conkeror.init_and_get_services = function(settings, I) {\n        pmutils.debug(`installing password managers and services using settings ${pmutils.obj2str(settings)}`);\n        var services = get_password_manager_services(I);\n        install_password_managers(settings, I, services);\n        return services;\n    };\n\n    conkeror.register_password_manager_services = function(func) {\n        service_installers.push(func);\n    };\n\n    var get_password_manager_services = function(I) {\n        var services = {};\n        service_installers.forEach(function(func){\n            func(services, I);\n        });\n        pmutils.debug(`installed services`);\n        return services;\n    };\n\n    conkeror.register_password_manager_installer = function(func) {\n        pmutils.debug(`registering new password manager installer ${func}`);\n        password_manager_installers.push(func);\n    };\n\n    var install_password_managers = function(settings, I, services) {\n        pmutils.debug(`installing password managers using settings ${pmutils.obj2str(settings)}`);\n        settings.forEach(function(args){\n            pmutils.debug(`installing password manager for ${pmutils.obj2str(args)} using registered password manager installers ${password_manager_installers}`);\n            password_manager_installers.forEach(function(func){\n                func(args, services);\n            });\n        });\n    };\n\n    conkeror.register_password_generator = function (name, func){\n        pmutils.debug(`registering password generator ${name}`);\n        password_generators[name] = func;\n    };\n\n    conkeror.register_password_retriever = function(name, func){\n        pmutils.debug(`registering password retriever ${name}`);\n        password_retrievers[name] = func;\n    };\n\n    conkeror.get_password_generators = function() {\n        return Object.keys(password_generators);\n    };\n    conkeror.get_password_retrievers = function() {\n        return Object.keys(password_retrievers);\n    };\n\n    conkeror.let_generator_generate_and_save_password = function(name, domain, username, length, include_symbols=true) {\n        return password_generators[name](domain, username, length, include_symbols);\n    };\n\n    conkeror.let_retriever_get_username_and_password = function*(name, domain) {\n        pmutils.debug(`executing password_retriever: ${password_retrievers[name]}`);\n        var fields = yield ( password_retrievers[name](domain) );\n        pmutils.debug(`found fields ${pmutils.obj2str(fields)}`);\n        var ret = {};\n        Object.keys(fields).forEach(function(key) {\n            ret[key.toLowerCase()] = fields[key];\n        });\n        yield ( co_return(ret) );\n    };\n\n})();\n"]}