{"version":3,"sources":["../src/password-manage-utils.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AACR,WAAO,CAAC,uBAAuB,CAAC,CAAC;AACjC,QAAI,KAAK,GAAG,iBAAW,EAAE,CAAC;;;AAG1B,SAAK,CAAC,SAAS,CAAC,KAAK,GAAG,UAAS,GAAG,EAAC;AACjC,YAAI,uBAAuB,EAAC;AACxB,kBAAM,CAAC,iBAAiB,GAAG,GAAG,CAAC,CAAC;SACnC;KACJ,CAAC;AACF,SAAK,CAAC,SAAS,CAAC,IAAI,GAAG,UAAS,GAAG,EAAC;AAChC,cAAM,CAAC,GAAG,CAAC,CAAC;KACf,CAAC;AACF,SAAK,CAAC,SAAS,CAAC,cAAc,GAAG,UAAS,QAAQ,EAAE,aAAa,EAAE;AAC/D,YAAI,CAAC,MAAM,CAAC,QAAQ,EAAK,aAAa,sBAAmB,CAAC;KAC7D,CAAC;AACF,SAAK,CAAC,SAAS,CAAC,uBAAuB,GAAG,UAAS,KAAK,EAAE;AACtD,YAAI,GAAG,GAAG,EAAE,CAAC;AACb,aAAK,CAAC,OAAO,CAAC,UAAS,KAAK,EAAE;AAC1B,iBAAK,GAAG,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC9B,gBAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAC1B,gBAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAC1B,eAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;SAClB,CAAC,CAAC;AACH,eAAO,GAAG,CAAC;KACd,CAAC;AACF,SAAK,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,SAAS,EAAE,OAAO,EAAE;AAClD,YAAI,CAAC,SAAS,EAAE;AACZ,mBAAO,GAAG,OAAO,IAAI,kBAAkB,CAAC;AACxC,gBAAI,OAAO,KAAK,KAAK,WAAW,EAAE;AAC9B,sBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;aAC5B;AACD,kBAAM,OAAO,CAAC;SACjB;KACJ,CAAC;AACF,SAAK,CAAC,SAAS,CAAC,OAAO,GAAG,UAAS,GAAG,EAAE;AACpC,eAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;KAC9B,CAAC;AACF,SAAK,CAAC,SAAS,CAAC,aAAa,GAAG,UAAS,GAAG,EAAE,YAAY,EAAE;AACxD,eAAO,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,UAAS,CAAC,EAAE,GAAG,EAAE;AAC9C,mBAAO,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;SACpE,CAAC,CAAC;KACN,CAAC;AACF,SAAK,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AAC/C,SAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC3B,YAAQ,CAAC,OAAO,GAAG,IAAI,KAAK,EAAE,CAAC;AAC/B,WAAO,CAAC,KAAK,sDAAoD,QAAQ,iBAAc,CAAC;CAC3F,CAAA,EAAG,CAAC","file":"password-manage-utils.js","sourcesContent":["(function() {\n    provide('password-manage-utils');\n    var Utils = function() {};\n    // * Utility functions\n    // ** Debug function - ONLY FOR USE DURING DEVELOPMENT, as this function will send sensitive information like passwords to the console log\n    Utils.prototype.debug = function(msg){\n        if (password_manage_debug_p){\n            dumpln(\"PASSWD-MANAGE: \" + msg);\n        }\n    };\n    Utils.prototype.info = function(msg){\n        dumpln(msg);\n    };\n    Utils.prototype.assertNotEmpty = function(variable, variable_name) {\n        this.assert(variable, `${variable_name} cannot be empty`);\n    };\n    Utils.prototype.convert_lines_to_object = function(lines) {\n        var ret = {};\n        lines.forEach(function(field) {\n            field = field.split(/:(.+)?/);\n            var key = field[0].trim();\n            var val = field[1].trim();\n            ret[key] = val;\n        });\n        return ret;\n    };\n    Utils.prototype.assert = function(condition, message) {\n        if (!condition) {\n            message = message || \"Assertion failed\";\n            if (typeof Error !== \"undefined\") {\n                throw new Error(message);\n            }\n            throw message; // Fallback\n        }\n    };\n    Utils.prototype.obj2str = function(obj) {\n        return JSON.stringify(obj);\n    };\n    Utils.prototype.string_format = function(str, replacements) {\n        return str.replace(/{([^}]+)}/g, function(_, key) {\n            return replacements.hasOwnProperty(key) ? replacements[key] : '';\n        });\n    };\n    Utils.prototype = Object.seal(Utils.prototype);\n    Utils = Object.seal(Utils);\n    conkeror.pmutils = new Utils();\n    pmutils.debug(`adding utils installation function to conkeror (${conkeror}) namespace`);\n})();\n\n"]}