{"version":3,"sources":["../src/password-manage-pass.js"],"names":[],"mappings":"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","file":"password-manage-pass.js","sourcesContent":["(function() {\n    require('password-manage-hooks');\n    require('password-manage-utils');\n    provide('password-manage-pass');\n    function register_self(args, services) {\n        pmutils.debug(`checking whether we should register pass manager for arguments ${args}`);\n        if (args.type !== 'pass')\n            return;\n        var pass = new Pass(services.user, services.browser, services.shell, args);\n        var name = `pass - ${args.username}`;\n        register_password_generator(name, pass.generate_and_save_password.bind(pass));\n        register_password_retriever(name, pass.get_username_and_password.bind(pass));\n    }\n    register_password_manager_installer(register_self);\n\n    var Pass = function(user, browser, shell, args) {\n        this.user = user;\n        this.browser = browser;\n        this.login = args.username;\n        this.password_name_template = args.password_name_template || \"Accounts/{domain}\";\n        this.shell = shell;\n    };\n    var STRIP_COLORS = String.raw`sed -r \"s/\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g\"`;\n    Pass.prototype.generate_and_save_password = function(domain, username, length, include_symbol) {\n        pmutils.assertNotEmpty(domain, 'domain');\n        pmutils.assertNotEmpty(username, 'username');\n        pmutils.assertNotEmpty(length, 'length');\n        pmutils.debug(`using pass to generate password, and then save that password against the supplied username and domain`);\n        var name = pmutils.string_format(this.password_name_template, {\n            domain: domain,\n            username: username\n        });\n        pmutils.debug(`testing if a password named ${name} already exists`);\n        var existing_passwords = yield ( this.list_passwords() );\n        if (existing_passwords.indexOf(name) !== -1){\n            throw new interactive_error(`could not generate password named '${name}' as one already exists`);\n        }\n        var symbols = include_symbol ? \"--symbols\" : \"\";\n        var password = yield ( this.get_command(`pwgen ${symbols} ${length} 1`) );\n        password = password.data;\n        var input = `${password}\nusername:${username}\nurl:${domain}\n`;\n        var results = yield ( this.get_command(`pass insert -m -f \"${name}\"`, input) );\n        yield ( co_return(password) );\n    };\n    Pass.prototype.get_username_and_password = function(domain) {\n        pmutils.debug(`retrieving username and password for ${domain}`);\n        var passwords = yield ( this.list_passwords() );\n        var site = yield ( this.user.ask_to_select(\"select site: \", passwords, domain) );\n        var fields = yield ( this.get_command(`pass show \"${site}\"`) );\n        fields = `password:${fields.data}`.split('\\n');\n        fields = pmutils.convert_lines_to_object(fields);\n        yield ( co_return(fields) );\n    };\n\n    function clean_output(output) {\n        output = output.split(\"\\n\");\n        return output[1];\n    }\n    Pass.prototype.list_passwords = function() {\n        var results = yield ( this.get_command('find $HOME/.password-store/ -name \"*.gpg\"') );\n        var passwords = results.data.split(\"\\n\");\n        passwords = passwords.map(function(pass){\n            return pass.split(\".password-store/\")[1].replace('.gpg', '');\n        });\n        yield ( co_return(passwords) );\n    };\n    Pass.prototype.get_command = function(comm, input, error_ok_func=null){\n        pmutils.debug(`executing provided shell command: ${comm} and returning results as an object containing data, error and return_code`);\n        pmutils.assertNotEmpty(comm, \"comm\");\n        var self = this;\n\n        var results = yield ( this.shell.get_command(comm, input) );\n\n        if (error_ok_func && !error_ok_func(results)){\n            yield ( co_return(results) );\n            return;\n        }\n        if (/cancelled by user/.test(results.error)) {\n            pmutils.debug(`user cancelled`);\n            throw new interactive_error(`cancelled password prompt`);\n        }\n        else if (!results.data && results.error) {\n            throw new interactive_error(`error received from Pass - ${results.error}`);\n        }\n        else if (!results.error && !results.data){\n            throw new interactive_error(`no result retrieved from Pass`);\n        }\n        yield ( co_return(results) );\n    };\n    \n})();\n"]}