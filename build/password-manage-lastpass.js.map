{"version":3,"sources":["../src/password-manage-lastpass.js"],"names":[],"mappings":"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","file":"password-manage-lastpass.js","sourcesContent":["(function() {\n    require('password-manage-hooks');\n    require('password-manage-utils');\n    function register_self(args, services){\n        pmutils.debug(`checking if we should register lastpass manager for arguments ${args}`);\n        if (args.type == 'lastpass') {\n            var lp = new LastPass(services.user, services.browser, services.shell, args.username);\n            var name = `lastpass - ${args.username}`;\n            register_password_generator(name, lp.generate_and_save_password.bind(lp));\n            register_password_retriever(name, function(domain) {\n                var site_id = yield ( lp.get_site_id_for_domain(domain) );\n                var fields = yield ( lp.get_username_and_password(site_id) );\n                yield ( co_return(fields) );\n            });\n        }\n    }\n    register_password_manager_installer(register_self);\n\n    // * LastPass class definition\n    var LastPass = function(user, browser, shell, login){\n        this.user = user;\n        this.browser = browser;\n        this.login = login;\n        this.shell = shell;\n        this.masterpassword = null;\n    };\n\n    LastPass.prototype.generate_and_save_password = function (domain, username, length, include_symbols=true) {\n        pmutils.debug(\"using lastpass to generate password, and then save that password against the supplied username and domain\");\n        pmutils.assertNotEmpty(domain, 'domain');\n        pmutils.assertNotEmpty(username, 'username');\n        pmutils.assertNotEmpty(length, 'length');\n\n        var no_symbols = \"\";\n        if (!include_symbols){\n            no_symbols = \"--no-symbols\";\n        }\n        var command = `lpass generate ${no_symbols} --username=\"${username}\" --url=\"${domain}\" \"${username} - ${domain}\" ${length}`;\n        var results = yield ( this.get_command(command) );\n        yield ( co_return(results.data) );\n    };\n\n    LastPass.prototype.get_username_and_password = function(siteId) {\n        pmutils.assertNotEmpty(siteId, 'siteId');\n        pmutils.debug(`retrieving username and password for site with id ${siteId}`);\n\n        var ret = yield ( this._get_fields(siteId) );\n        yield ( co_return(ret) );\n    };\n\n    LastPass.prototype.get_command = function(comm, input){\n        pmutils.debug(`executing provided shell command: ${comm} and returning results as an object containing data, error and return_code`);\n        pmutils.assertNotEmpty(comm, \"comm\");\n        var self = this;\n        var masterpassword;\n\n        var results = yield ( this.shell.get_command(comm, input) );\n\n        //computer not trusted\n        if (/Google Authenticator Code/m.test(results.error)){\n            throw new interactive_error(\"ERROR: Please trust this computer by running 'lpass login --trust YOUR_LOGIN'\");\n        }\n        //not logged in\n        else if (/find decryption key/m.test(results.error)){\n            pmutils.debug(`trying to log into lastpass`);\n            masterpassword = yield ( this.user.ask_for_password( \"please enter lastpass master password: \") );\n            yield ( self.get_command(`lpass login ${this.login}`, masterpassword) );\n            self.user.display_message(\"logging in to lastpass\");\n            results = yield ( self.get_command(comm, input) );\n        }\n        else if (!results.data && results.error) {\n            throw new interactive_error(`error received from LastPass - ${results.error}`);\n        }\n        else if (!results.error && !results.data){\n            throw new interactive_error(`no result retrieved from LastPass`);\n        }\n        yield ( co_return(results) );\n    };\n\n    LastPass.prototype.search_lpass_for_domain = function(domain) {\n        pmutils.debug(`searching lastpass for the provided domain: ${domain}`);\n        pmutils.assertNotEmpty(domain, 'domain');\n\n        var results = yield ( this.get_command(`lpass show --id -G ${domain}`) );\n        var matches = results.data.split(\"\\n\");\n        if (matches.length > 1){\n            pmutils.debug(`${matches.length} matches found for ${domain}, filtering results to only ones with ids in the name`);\n            matches = matches.filter(function(it) {\n                return /\\d+/.test(it);\n            });\n        }\n        yield ( co_return(matches) );\n    };\n\n    LastPass.prototype.get_site_id_for_domain = function(domain){\n        pmutils.debug(`retrieving site id from lastpass by searching for the provided domain: ${domain}`);\n        pmutils.assertNotEmpty(domain, 'domain');\n\n        var matches = yield ( this.search_lpass_for_domain(domain) );\n        var id;\n        if (matches.length == 1){\n            pmutils.debug(`only one match found`);\n            id = matches[0];\n        }\n        else {\n            pmutils.debug(`more than 1 matching entry found, asking user to select the correct site - found ${matches}`);\n            var site = yield ( this.user.ask_to_select(\"select site: \", matches) );\n            id = site.match(/id: (\\d*)\\]/)[1];\n            pmutils.debug(`user chose site ${site} with id ${id}`);\n        }\n        pmutils.debug(`1 match found or selected: $(id)`);\n        yield ( co_return(id) );\n    };\n\n    LastPass.prototype.set_login_and_password_fields = function(siteId){\n        pmutils.assertNotEmpty(siteId, 'siteId');\n        pmutils.debug(`trying to set login and password fields in HTML for site ${siteId}`);\n        var fields = yield ( this._get_fields(siteId) );\n        this.browser.set_login_and_password_fields(fields.URL, fields);\n    };\n\n    LastPass.prototype._get_lastpass_value = function(siteId, type, masterpassword){\n        pmutils.assertNotEmpty(siteId, 'siteId');\n        pmutils.debug(`querying lastpass site ${siteId} for ${type}`);\n\n        var command = `lpass show --${type} ${siteId}`;\n        var results = yield ( this.get_command(command) );\n        //password protected entry\n        if(/Please enter the LastPass master password/m.test(results.error)) {\n            masterpassword = yield ( this.user.ask_for_password( \"password protected entry - enter lastpass master password: \") );\n            results = yield ( self._get_lastpass_value(comm, masterpassword) );\n        }\n\n        yield ( co_return(results) );\n    };\n\n    LastPass.prototype._get_fields = function(siteId) {\n        pmutils.assertNotEmpty(siteId, 'siteId');\n        pmutils.debug(`retrieving HTML field names and values for site ${siteId}`);\n\n        var fields = yield ( this._get_lastpass_value(siteId, 'all') );\n\n        var lines = fields.data.split(\"\\n\");\n        var ret = pmutils.convert_lines_to_object(lines);\n        yield ( co_return(ret) );\n\n    };\n    LastPass.prototype = Object.freeze(LastPass.prototype);\n    LastPass = Object.freeze(LastPass);\n    provide('password-manage-lastpass');\n})();\n"]}