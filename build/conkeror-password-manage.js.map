{"version":3,"sources":["../src/conkeror-password-manage.js"],"names":[],"mappings":"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","file":"conkeror-password-manage.js","sourcesContent":["(function(){\n    // * Conkeror Password Manager\n    define_variable(\"password_manage_generate_password_shortcut\", \"C-w x\",\n                    \"Press to generate password for current site\");\n    define_variable(\"password_manage_password_paste_key\", \"C-t\",\n                    \"Key to use to paste passwords and usernames into focused text boxes\");\n    define_variable(\"password_manage_lastpass_username\", \"\",\n                    \"Default username to login to LastPass\");\n    define_variable(\"password_manage_setup_keybindings_p\", true,\n                    \"NOT WORKING? - Whether to setup the default keybindings\");\n    define_variable(\"password_manage_debug_p\", false,\n                    \"Enable debug mode. \" +\n                    \"WARNING - this will print confidential material, like your passwords, to the console, and possible other logs!\");\n    define_variable(\"password_manage_settings\", [],\n                    \"Register and enable different password managers\");\n\n    require('browser-polyfill');\n    require('password-manage-utils');\n    require('password-manage-hooks');\n    require('password-manage-services');\n    provide(\"conkeror-password-manage\");\n\n    pmutils.info(`loading passwd-manage module: provides functionality to use external password managers to retrieve and add passwords for Conkeror`);\n    pmutils.info(`currently only supports LastPass (http://www.lastpass.com)`);\n\n    // ** Public API / Conkeror integration\n    interactive(\"passwd-generate-and-save\",\n                \"generates and saves a password for the provided username and domain\",\n                generate_and_save);\n    interactive(\"passwd-get-username-and-password\",\n                \"retrieves the username and password for given domain, \" +\n                \"sets 'password_manage_password_paste_key' to paste username and then password into focused fields\",\n                get_username_and_password);\n\n    function generate_and_save(I) {\n        pmutils.info('starting to generate and save a new password');\n        var username,\n            domain = \"\",\n            lengths = [6,8,12,16,20],\n            length,\n            symbols,\n            password,\n            generator_name,\n            fields;\n        var services = init_and_get_services(password_manage_settings, I);\n        var browser = services.browser;\n        var user = services.user;\n        generator_name = yield ( select_password_manager(user, 'generator', get_password_generators()) );\n\n        domain = browser.get_current_domain();\n        domain = yield ( user.ask_if_different(\"domain: \", domain) );\n        username = yield ( user.ask_if_different(\"username: \", username) );\n        length = yield ( user.ask_to_select_number(\"length: \", 12, lengths) );\n        symbols = yield ( I.minibuffer.read_yes_or_no($prompt = \"include symbols? \", $initial_value='yes') );\n        password = yield ( let_generator_generate_and_save_password(generator_name, domain, username, length, symbols) );\n\n        pmutils.debug(`CONFIDENTIAL: retrieved password ${password} from ${generator_name}`);\n        fields = {\n            username: username,\n            password: password\n        };\n        setup_paster(I, user, fields);\n        browser.set_login_and_password_fields(domain, fields);\n    }\n    function select_password_manager(user, type, options){\n        if (!options.length) {\n            throw new interactive_error(`no password ${type} registered`);\n        }\n        var manager_name = yield ( user.ask_to_select(\"password manager: \", options) );\n        yield ( co_return(manager_name) );\n    }\n\n    function get_username_and_password(I) {\n        pmutils.debug(`retrieving username and password from password manager`);\n        var services = init_and_get_services(password_manage_settings, I);\n        var browser = services.browser;\n        var user = services.user;\n        var generator_name = yield ( select_password_manager(user, 'retriever', get_password_retrievers()) );\n        var domain = browser.get_current_domain();\n        domain = yield ( user.ask_if_different(\"domain: \", domain) );\n        var fields = yield ( let_retriever_get_username_and_password(generator_name, domain) );\n        browser.set_login_and_password_fields(fields.url || fields.URL || domain, fields);\n        setup_paster(I, user, fields);\n    }\n\n    function setup_paster(I, user, fields){\n        pmutils.debug(`setting up one shot pasters with fields ${pmutils.obj2str(fields)}`);\n        function setup_password_paster(){\n            setup_value_paster(I, fields.password, 'password');\n            user.display_message(`Press ${password_manage_password_paste_key} to paste password into password field`);\n        }\n        if (fields.username){\n            setup_value_paster(I, fields.username, 'username', function(){\n                pmutils.debug(`now loading password into the one-shot paster`);\n                setup_password_paster();\n            });\n            user.display_message(`Press ${password_manage_password_paste_key} to paste username into username field`);\n        } else {\n            pmutils.debug('no username supplied, only pasting password');\n            setup_password_paster();\n        }\n    }\n    function setup_value_paster(I, value, type, onSuccess=null){\n        pmutils.debug(`CONFIDENTIAL: initialising interactive function to paste ${type} ${value} into focused input HTML element`);\n        if (!onSuccess){\n            pmutils.debug(`CONFIDENTIAL: no onSuccess provided, which means that we are finished after pasting ${value} one time`);\n            onSuccess = function() {\n                pmutils.debug(`unbinding the passwd-set-value function, because we don't want passwords to be pasted by accident`);\n                interactive(`passwd-set-value`,\n                            \"does nothing - no password set\",\n                            function() {}\n                           );\n            };\n        }\n        interactive(`passwd-set-value`,\n                    `sets the current ${type} into the current field`,\n\n                    function(I) {\n                        if (I.buffer.focused_element){\n                            pmutils.debug(`CONFIDENTIAL: pasting value ${value} into the focused field`);\n                            I.buffer.focused_element.value=value;\n                        }\n                        onSuccess();\n                    });\n        I.window.setTimeout(onSuccess, 30000);\n    }\n\n})();\n"]}